#!/bin/bash

# Slurm Code Usage Analysis (scua)
#
# Usage:
#    scua [options]
#Â 
# Analyse code usage from Slurm. Relies on the scua.py 
# program to do the analysis. This wrapper script runs the
# correct sacct command to extract the data from Slurm and
# passes it to scua.py. If you already have the data, you
# can use the scua.py program directly.
#
#----------------------------------------------------------------------
# Copyright 2021, 2022 EPCC, The University of Edinburgh
#
# This file is part of usage-analysis.
#
# usage-analysis is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# usage-analysis is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with usage-analysis.  If not, see <http://www.gnu.org/licenses/>.
#----------------------------------------------------------------------
#

# Paths to Python utilities
SCUA_PYTHON="${SCUA_BASE}/bin/scua.py"
SCUA_USERADD="${SCUA_BASE}/bin/add_userid.py"
# Use :: as the delimiter to avoid issues with commas in job names
SACCT_BASE_OPTS="--format JobIDRaw,JobName%30,User,Account,NNodes,NTasks,ElapsedRaw,State,ConsumedEnergyRaw,MaxRSS,AveRSS,ReqCPUFreq -P --delimiter ::"
SACCT_USER_BASE_OPTS="-X --format JobIDRaw,User -P --delimiter ,"
SACCT_OUTPUT_FILE="scua_sacct.dat"
SACCT_USER_FILE="scua_sacct_users.dat"
SACCT_EXCLUDE_STATES="RUNNING|PENDING|REQUEUED"

# Get command line options
startdate=""
enddate=""
extra_opts=""
keep_file=""
run_python=1
python_opts=""
prefix="scua"
while getopts ":a:A:E:fgcmhknp:q:r:sS:tu:wx:" opt; do
  case ${opt} in
    A )
      extra_opts="${extra_opts} --group=${OPTARG}"
      ;;
    E )
      enddate="-E ${OPTARG}"
      ;;
    h )
      echo "Usage: scua [options]"
      echo "Options:"
      echo " -a account_csv  Perform analysis by research area. account_csv is a CSV file with a mapping of account codes to research areas"
      echo " -A account      Limit to specified account code, e.g. z01"
      echo " -b              Shared node use"
      echo " -E date/time    End date/time as YYYY-MM-DDTHH:MM, e.g. 2021-02-01T00:00"
      echo " -f              Perform analysis of CPU frequency use"
      echo " -l              Perform analysis of programming language use"
      echo " -k              Keeps the intermediate output from sacct in <prefix>_sacct.dat and <prefix>_sacct_users.dat"
      echo " -n              Do not run Python analysis - just produce data file"
      echo " -g              Produce graphs of usage data (as png)"
      echo " -c              Save tables of data (as csv)"
      echo " -m              Save tables of data (as markdown)"
      echo " -n units        Specify usage units: Nodeh or Coreh (default: Nodeh)"
      echo " -h              Show this help"
      echo " -p prefix       Prefix for output file names. Default prefix is 'scua'"
      echo " -q qos          Limit analysis to specified Slurm QoS"
      echo " -r partition    Limit analysis to specified Slurm partition"
      echo " -s              Split unknown, Python and a.out use by user"
      echo " -S date/time    Start date/time as YYYY-MM-DDTHH:MM, e.g. 2021-02-01T00:00"
      echo " -t              Perform analysis by computational motif"
      echo " -u user         Limit to specific user"
      echo " -w              Perform analysis of mean node power draw"
      echo " -x STATE1|STATE2|...  Specify Slurm job states to exlude from the analysis. Default is ${SACCT_EXCLUDE_STATES}"
      exit 0
      ;;
    a )
      python_opts="${python_opts} --projects=${OPTARG}"
      ;;
    b )
      python_opts="${python_opts} --sharednode"
      ;;
    k )
      keep_file=1
      ;;
    n )
      run_python=""
      ;;
    f )
      python_opts="${python_opts} --cpufreq"
      ;;
    l )
      python_opts="${python_opts} --lang"
      ;;
    g )
      python_opts="${python_opts} --plots"
      ;;
    c )
      python_opts="${python_opts} --csv"
      ;;
    m )
      python_opts="${python_opts} --md"
      ;;
    n )
      python_opts="${python_opts} --units=${OPTARG}"
      ;;
    p )
      python_opts="${python_opts} --prefix=${OPTARG}"
      prefix=${OPTARG}
      ;;
    q )
      extra_opts="${extra_opts} --qos=${OPTARG}"
      ;;
    r )
      extra_opts="${extra_opts} --partition=${OPTARG}"
      ;;
    s )
      python_opts="${python_opts} --usersplit"
      ;;
    S )
      startdate="-S ${OPTARG}"
      ;;
    t )
      python_opts="${python_opts} --motif"
      ;;
    u )
      extra_opts="${extra_opts} -u ${OPTARG}"
      ;;
    w )
      python_opts="${python_opts} --power"
      ;;
    x )
      SACCT_EXCLUDE_STATES="${OPTARG}"
      ;;
    \? )
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
     : )
      echo "Invalid Option: -$OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

SACCT_OUTPUT_FILE="${prefix}_sacct.dat"
SACCT_USER_FILE="${prefix}_sacct_users.dat"
extra_opts="${extra_opts} -a"
echo "Running: sacct ${startdate} ${enddate} ${extra_opts} ${SACCT_BASE_OPTS} | egrep \"^[0-9]+\.[0-9]\" | egrep -v \"${SACCT_EXCLUDE_STATES}\""
sacct ${startdate} ${enddate} ${extra_opts} ${SACCT_BASE_OPTS} | egrep '^[0-9]+\.[0-9]' | egrep -v "${SACCT_EXCLUDE_STATES}" > ${SACCT_OUTPUT_FILE}
# Run to get the user ID associated with the jobs
sacct ${startdate} ${enddate} ${extra_opts} ${SACCT_USER_BASE_OPTS} | egrep -v "${SACCT_EXCLUDE_STATES}" > ${SACCT_USER_FILE}

# Here we need to merge the job step data with the username information
echo "Running: ${SCUA_USERADD} ${SACCT_OUTPUT_FILE} ${SACCT_USER_FILE} ${SACCT_OUTPUT_FILE}"
${SCUA_USERADD} ${SACCT_OUTPUT_FILE} ${SACCT_USER_FILE} ${SACCT_OUTPUT_FILE}

if [ -z ${run_python} ]
then
  exit 0
fi

if [ -s ${SACCT_OUTPUT_FILE} ]
then
   # We have some data, lets process it using the Python program
   echo "Running: ${SCUA_PYTHON} ${python_opts} ${SACCT_OUTPUT_FILE}"
   ${SCUA_PYTHON} ${python_opts} ${SACCT_OUTPUT_FILE}
else
   # No data, just stop
   echo "No jobs found"
fi

if [ -z "$keep_file" ] 
then
   rm ${SACCT_OUTPUT_FILE} ${SACCT_USER_FILE}
fi
exit 0

